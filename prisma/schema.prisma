generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model absences {
  absence_id          Int                @id @default(autoincrement())
  absence_start       DateTime?          @db.Timestamp(6)
  absence_end         DateTime?          @db.Timestamp(6)
  compensation_start  DateTime?          @db.Timestamp(6)
  compensation_end    DateTime?          @db.Timestamp(6)
  compensation_status compensation_enum?
  ws_fk               Int?
  working_scholars    working_scholars?  @relation(fields: [ws_fk], references: [ws_id], onDelete: NoAction, onUpdate: NoAction)
}

model announcements {
  announcement_id    Int       @id @default(autoincrement())
  announcer_fk       Int?
  announcement_title String?   @db.VarChar(100)
  message            String?
  date_posted        DateTime? @db.Timestamp(6)
  users              users?    @relation(fields: [announcer_fk], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model applicants {
  applicant_id     Int                @id @default(autoincrement())
  name_fk          Int?
  school_name      String?            @db.VarChar(30)
  address          String?            @db.VarChar(100)
  course           String?            @db.VarChar(40)
  age              Int?
  year             Int?
  contact          String?            @db.VarChar(20)
  parent_fk        Int?
  status           applicant_enum?
  names            names?             @relation(fields: [name_fk], references: [name_id], onDelete: NoAction, onUpdate: NoAction)
  parents          parents?           @relation(fields: [parent_fk], references: [parent_id], onDelete: NoAction, onUpdate: NoAction)
  working_scholars working_scholars[]
}

model departments {
  department_id    Int                @id @default(autoincrement())
  department_name  String?            @db.VarChar(100)
  ws_count         Int?
  employee_count   Int?
  access_lvl       access_enum?
  working_scholars working_scholars[]
  ws_requests      ws_requests[]
}

model guardians {
  guardian_id                          Int       @id @default(autoincrement())
  contact                              String?   @db.VarChar(100)
  name_fk                              Int?
  names                                names?    @relation(fields: [name_fk], references: [name_id], onDelete: NoAction, onUpdate: NoAction)
  parents_parents_father_fkToguardians parents[] @relation("parents_father_fkToguardians")
  parents_parents_mother_fkToguardians parents[] @relation("parents_mother_fkToguardians")
}

model journals {
  journal_id       Int               @id @default(autoincrement())
  ws_fk            Int?
  message          String?
  date_created     DateTime?         @db.Timestamp(6)
  working_scholars working_scholars? @relation(fields: [ws_fk], references: [ws_id], onDelete: NoAction, onUpdate: NoAction)
}

model names {
  name_id      Int            @id(map: "name_pkey")
  fname        String?        @db.VarChar(100)
  lname        String?        @db.VarChar(100)
  mname        String?        @db.VarChar(100)
  suffix       String?        @db.VarChar(100)
  applicants   applicants[]
  guardians    guardians[]
  user_details user_details[]
}

model parents {
  parent_id                              Int          @id @default(autoincrement())
  mother_fk                              Int?
  father_fk                              Int?
  applicants                             applicants[]
  guardians_parents_father_fkToguardians guardians?   @relation("parents_father_fkToguardians", fields: [father_fk], references: [guardian_id], onDelete: NoAction, onUpdate: NoAction)
  guardians_parents_mother_fkToguardians guardians?   @relation("parents_mother_fkToguardians", fields: [mother_fk], references: [guardian_id], onDelete: NoAction, onUpdate: NoAction)
}

model user_details {
  userdetail_id Int     @id @default(autoincrement())
  name_fk       Int?
  address       String? @db.VarChar(100)
  contact       String? @db.VarChar(100)
  names         names?  @relation(fields: [name_fk], references: [name_id], onDelete: NoAction, onUpdate: NoAction)
  users         users[]
}

model user_violations {
  user_violation_id Int               @id @default(autoincrement())
  violation_type    violation_enum?
  ws_fk             Int?
  working_scholars  working_scholars? @relation(fields: [ws_fk], references: [ws_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id       Int             @id @default(autoincrement())
  userdetail_fk Int?
  username      String?         @db.VarChar(100)
  password      String?         @db.VarChar(255)
  announcements announcements[]
  user_details  user_details?   @relation(fields: [userdetail_fk], references: [userdetail_id], onDelete: NoAction, onUpdate: NoAction)
}

model working_scholars {
  ws_id           Int               @id @default(autoincrement())
  dept_fk         Int?
  applicant_fk    Int?
  absences        absences[]
  journals        journals[]
  user_violations user_violations[]
  applicants      applicants?       @relation(fields: [applicant_fk], references: [applicant_id], onDelete: NoAction, onUpdate: NoAction)
  departments     departments?      @relation(fields: [dept_fk], references: [department_id], onDelete: NoAction, onUpdate: NoAction)
}

model ws_requests {
  ws_req_id    Int            @id @default(autoincrement())
  ws_req_name  String?        @db.VarChar(100)
  message      String?
  dept_name_fk Int?
  ws_req_stat  req_stat_enum?
  ws_req_type  req_type_enum?
  departments  departments?   @relation(fields: [dept_name_fk], references: [department_id], onDelete: NoAction, onUpdate: NoAction)
}

enum access_enum {
  admin
  hr
  cad
  main
  medical
  normal
}

enum applicant_enum {
  pending
  denied
  accepted
  expired
  retired
}

enum compensation_enum {
  pending
  compensated
}

enum req_stat_enum {
  waiting
  approved
  rejected
}

enum req_type_enum {
  additional
  replacement
}

enum violation_enum {
  warning
  minor
  major
}
